install.packages("rmarkdown")
library('ggplot2')
library('ggthemes')
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#bind the two datasets into one
d3 <- rbind(d1, d2)
#age vs  Dalc by sex
ggplot(d3, aes(x=age, y=Dalc, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#histogram with family relations on x axis with MEAN
ggplot(d3, aes(x=famrel)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(famrel, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
setwd("~/Documents/Analisis y visualizacion/Alcoholism-students-analisis-visualization-final")
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#bind the two datasets into one
d3 <- rbind(d1, d2)
#age vs  Dalc by sex
ggplot(d3, aes(x=age, y=Dalc, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#histogram with family relations on x axis with MEAN
ggplot(d3, aes(x=famrel)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(famrel, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#histogram with health on x axis with MEAN
ggplot(d3, aes(x=health)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(health, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#Dalc vs health colored by sex
ggplot(d3, aes(x=Dalc, y=health, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#Histogram on a categorical variable for regular day alcohol and fam support
ggplot(d3, aes(Dalc, fill = famsup))+
geom_bar()
#Histogram on a categorical variable for regular day alcohol and guardian
ggplot(d3, aes(Dalc, fill = guardian))+
geom_bar()
# Antes de empezar con cualquier parte del trabajo seteo un seed.
set.seed(400)
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=Dalc, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
# Antes de empezar con cualquier parte del trabajo seteo un seed.
set.seed(400)
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3[filas.unicas, 1:30]
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=Dalc, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#histogram with family relations on x axis with MEAN
ggplot(d, aes(x=famrel)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(famrel, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#histogram with health on x axis with MEAN
ggplot(d, aes(x=health)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(health, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#Dalc vs health colored by sex
ggplot(d, aes(x=Dalc, y=health, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#Histogram on a categorical variable for regular day alcohol and fam support
ggplot(d, aes(Dalc, fill = famsup))+
geom_bar()
#Histogram on a categorical variable for regular day alcohol and guardian
ggplot(d, aes(Dalc, fill = guardian))+
geom_bar()
str(d)
#comprobaciones de que el dataframe solamente tiene 650 elementos.
nrow(d)
#comprobaciones de que el dataframe solamente tiene en cuenta 30 columnas y que dentro de sus nombres no se incluyen G1,G2 o G3.
ncol(d)
colnames(d)
#Dentro del dataset d, se crear? una columna llamada DalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$DalcBina <- ifelse(d$Dalc>3, "yes", "no")
#Dentro del dataset d, se crear? una columna llamada WalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$WalcBina <- ifelse(d$Walc>3, "yes", "no")
# Tambi?n, se usar? una ecuaci?n que nos permite encontrar cu?l ser?a el consumo de alcohol en la totalidad que dar?a sumar Walc y Dalc. Se
# le denomina Alc y consiste en multiplicar los d?as que comprender?a Walc y Dalc de la semana sobre el total de estos. Determinando as? un valor
#que es un espectro m?s amplio de ?mbos. Se utiliza la funci?n round() con par?metro digits=0 para obtener numeros redondeados del 1-5 de nuevo.
d$Alc <- round((d$Walc*2+d$Dalc*5)/7,digits = 0)
#Hago un summary para saber los quartiles, media y mediana de la variable Alc
summary(d$Alc)
# Antes de empezar con cualquier parte del trabajo seteo un seed.
set.seed(400)
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3[filas.unicas, 1:30]
str(d)
#comprobaciones de que el dataframe solamente tiene 650 elementos.
nrow(d)
#comprobaciones de que el dataframe solamente tiene en cuenta 30 columnas y que dentro de sus nombres no se incluyen G1,G2 o G3.
ncol(d)
colnames(d)
#Dentro del dataset d, se crear? una columna llamada DalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$DalcBina <- ifelse(d$Dalc>3, "yes", "no")
#Dentro del dataset d, se crear? una columna llamada WalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$WalcBina <- ifelse(d$Walc>3, "yes", "no")
# Tambi?n, se usar? una ecuaci?n que nos permite encontrar cu?l ser?a el consumo de alcohol en la totalidad que dar?a sumar Walc y Dalc. Se
# le denomina Alc y consiste en multiplicar los d?as que comprender?a Walc y Dalc de la semana sobre el total de estos. Determinando as? un valor
#que es un espectro m?s amplio de ?mbos. Se utiliza la funci?n round() con par?metro digits=0 para obtener numeros redondeados del 1-5 de nuevo.
d$Alc <- round((d$Walc*2+d$Dalc*5)/7,digits = 0)
#Hago un summary para saber los quartiles, media y mediana de la variable Alc
summary(d$Alc)
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=Dalc, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=DalcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#histogram with family relations on x axis with MEAN
ggplot(d, aes(x=famrel)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(famrel, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#histogram with health on x axis with MEAN
ggplot(d, aes(x=health)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(health, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#Dalc vs health colored by sex
ggplot(d, aes(x=Dalc, y=health, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#Dalc vs health colored by sex
ggplot(d, aes(x=DalcBina, y=health, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=DalcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#histogram with family relations on x axis with MEAN
ggplot(d, aes(x=famrel)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(famrel, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#histogram with health on x axis with MEAN
ggplot(d, aes(x=health)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(health, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
#Dalc vs health colored by sex
ggplot(d, aes(x=DalcBina, y=health, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=walcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#age vs  Dalc by sex
ggplot(d, aes(x=age, y=WalcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#Histogram on a categorical variable for regular day alcohol and guardian
ggplot(d, aes(WalcBina, fill = guardian))+
geom_bar()
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=d, importance=TRUE, ntree=5500)
install.packages('randomForest')
library('randomForest')
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=d, importance=TRUE, ntree=5500)
#para ver las variables mas importantes (Entre mayor sea el valor mas importante es dicha variable)
varImpPlot(randomF)
# Antes de empezar con cualquier parte del trabajo seteo un seed.
set.seed(400)
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3[filas.unicas, 1:30]
str(d)
#comprobaciones de que el dataframe solamente tiene 650 elementos.
nrow(d)
#comprobaciones de que el dataframe solamente tiene en cuenta 30 columnas y que dentro de sus nombres no se incluyen G1,G2 o G3.
ncol(d)
colnames(d)
#Dentro del dataset d, se crear? una columna llamada DalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$DalcBina <- ifelse(d$Dalc>3, "yes", "no")
#Dentro del dataset d, se crear? una columna llamada WalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$WalcBina <- ifelse(d$Walc>3, "yes", "no")
# Tambi?n, se usar? una ecuaci?n que nos permite encontrar cu?l ser?a el consumo de alcohol en la totalidad que dar?a sumar Walc y Dalc. Se
# le denomina Alc y consiste en multiplicar los d?as que comprender?a Walc y Dalc de la semana sobre el total de estos. Determinando as? un valor
#que es un espectro m?s amplio de ?mbos. Se utiliza la funci?n round() con par?metro digits=0 para obtener numeros redondeados del 1-5 de nuevo.
d$Alc <- round((d$Walc*2+d$Dalc*5)/7,digits = 0)
#Hago un summary para saber los quartiles, media y mediana de la variable Alc
summary(d$Alc)
#age vs  Walc by sex
ggplot(d, aes(x=age, y=WalcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=d, importance=TRUE, ntree=5500)
#para ver las variables mas importantes (Entre mayor sea el valor mas importante es dicha variable)
varImpPlot(randomF)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(fit, test)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test)
## set the seed to make your partition reproductible
set.seed(400)
library('ggplot2')
library('ggthemes')
library('randomForest')
library('corrplot')
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3[filas.unicas, 1:30]
str(d)
#comprobaciones de que el dataframe solamente tiene 650 elementos.
nrow(d)
#comprobaciones de que el dataframe solamente tiene en cuenta 30 columnas y que dentro de sus nombres no se incluyen G1,G2 o G3.
ncol(d)
colnames(d)
#Dentro del dataset d, se crear? una columna llamada DalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$DalcBina <- ifelse(d$Dalc>3, "yes", "no")
#Dentro del dataset d, se crear? una columna llamada WalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$WalcBina <- ifelse(d$Walc>3, "yes", "no")
# Tambi?n, se usar? una ecuaci?n que nos permite encontrar cu?l ser?a el consumo de alcohol en la totalidad que dar?a sumar Walc y Dalc. Se
# le denomina Alc y consiste en multiplicar los d?as que comprender?a Walc y Dalc de la semana sobre el total de estos. Determinando as? un valor
#que es un espectro m?s amplio de ?mbos. Se utiliza la funci?n round() con par?metro digits=0 para obtener numeros redondeados del 1-5 de nuevo.
d$Alc <- round((d$Walc*2+d$Dalc*5)/7,digits = 0)
#Hago un summary para saber los quartiles, media y mediana de la variable Alc
summary(d$Alc)
#ahora divido en dos el tadaset al 75% para tener un test y un train
## 75% of the sample size
smp_size <- floor(0.75 * nrow(d))
## set the seed to make your partition reproductible
set.seed(400)
train_ind <- sample(seq_len(nrow(d)), size = smp_size)
train <- d[train_ind, ]
test <- d[-train_ind, ]
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=train, importance=TRUE, ntree=5500)
#para ver las variables mas importantes (Entre mayor sea el valor mas importante es dicha variable)
varImpPlot(randomF)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
nrow(Prediction)
ncol(Prediction)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test, type = "response")
nrow(Prediction)
ncol(Prediction)
nrow(test)
ncol(test)
colnames(test)
test$Alc <- NULL
colnames(test)
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=train, importance=TRUE, ntree=5500)
#para ver las variables mas importantes (Entre mayor sea el valor mas importante es dicha variable)
varImpPlot(randomF)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
str(Prediction)
write.csv(Prediction, file = "areYouAnAlcoholic", row.names = FALSE)
nrow(Prediction)
ncol(Prediction)
colnames(Prediction)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test, type = "response")
str(Prediction)
nrow(Prediction)
ncol(Prediction)
colnames(Prediction)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
str(test$PassengerId)
Prediction
submit <- data.frame(Survived = Prediction)
write.csv(Prediction, file = "areYouAnAlcoholic", row.names = FALSE)
write.csv(submit, file = "areYouAnAlcoholic", row.names = FALSE)
submit <- data.frame(Survived = Prediction, PassengerId = d$PassengerId, )
submit <- data.frame(Survived = Prediction, PassengerId = d$PassengerId)
colnames(test)
View(d)
View(d)
View(d3)
View(d3)
submit <- data.frame(Survived = Prediction, StudentId = test$Id)
test$ID <- seq.int(nrow(test))
submit <- data.frame(Survived = Prediction, StudentId = test$Id)
submit <- data.frame(Survived = Prediction, StudentId = test$ID)
write.csv(submit, file = "areYouAnAlcoholic", row.names = FALSE)
theme_set(theme_tufte())  # from ggthemes
d1<-read.table("student-mat.csv",sep=",",header=TRUE)
d2<-read.table("student-por.csv",sep=",",header=TRUE)
#Hacemos la uni?n de los datasets de los estudiantes de la clase de portuges y matem?ticas
d3 <- rbind(d1, d2)
#Seg?n el archivo de Kaggle, 382 estudiantes se repiten en los dos datasets. En tanto debemos detectarlos y solo
#dejar una instancia. El archivo de la plataforma nos provees las columnas que nos permitir?n hacer una clara
#identificaci?n a falta de un ID por estudiante
columnas.identificadoras <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Ahora, haciendo uso de la funcion rownames(), que nos permite obtener strings con los nombre de las columnas, y
# la funci?n unique(), que nos permite identificar los ?ndices de las columnas que no est?n repetidas, podremos saber con exactitud
#cuales elemntos no se repiten. Ahora, filas.unicas contendr? esta informaci?n.
filas.unicas <- rownames(unique(d3[,as.character(columnas.identificadoras)]))
#ahora, creamos una variable que contiene estas las filas que no est?n repetidas.
#adem?s, excluiremos las columnas G1,G2 y G3 ya que no se pueden considerar como causas sino efectos de los dem?s clasificadores
d <-d3[filas.unicas, 1:30]
d$ID <- seq.int(nrow(d))
str(d)
#comprobaciones de que el dataframe solamente tiene 650 elementos.
nrow(d)
#comprobaciones de que el dataframe solamente tiene en cuenta 30 columnas y que dentro de sus nombres no se incluyen G1,G2 o G3.
ncol(d)
colnames(d)
#Dentro del dataset d, se crear? una columna llamada DalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$DalcBina <- ifelse(d$Dalc>3, "yes", "no")
#Dentro del dataset d, se crear? una columna llamada WalcBina donde se guardar? el valor binario determinado por un condicional
#que evalua si el valor es mayor o menor que 3. En caso de ser mayor a 3 se guardar? un valor de "yes", de lo contrario "no"
d$WalcBina <- ifelse(d$Walc>3, "yes", "no")
# Tambi?n, se usar? una ecuaci?n que nos permite encontrar cu?l ser?a el consumo de alcohol en la totalidad que dar?a sumar Walc y Dalc. Se
# le denomina Alc y consiste en multiplicar los d?as que comprender?a Walc y Dalc de la semana sobre el total de estos. Determinando as? un valor
#que es un espectro m?s amplio de ?mbos. Se utiliza la funci?n round() con par?metro digits=0 para obtener numeros redondeados del 1-5 de nuevo.
d$Alc <- round((d$Walc*2+d$Dalc*5)/7,digits = 0)
#Hago un summary para saber los quartiles, media y mediana de la variable Alc
summary(d$Alc)
#ploteo para entender mejor la relacion entre las variables
#age vs  Walc by sex
ggplot(d, aes(x=age, y=WalcBina, color=sex, alpha = 1/10)) +
geom_point() +
scale_colour_hue(l=70) +
geom_jitter()
#ahora divido en dos el tadaset al 75% para tener un test y un train
## 75% of the sample size
smp_size <- floor(0.75 * nrow(d))
## set the seed to make your partition reproductible
set.seed(400)
train_ind <- sample(seq_len(nrow(d)), size = smp_size)
train <- d[train_ind, ]
test <- d[-train_ind, ]
test$Alc <- NULL
nrow(test)
ncol(test)
colnames(test)
randomF <- randomForest(as.factor(Alc) ~ school + sex + age + address + famsize + Pstatus +
Medu + Fedu + Mjob + Fjob + reason + nursery + internet, data=train, importance=TRUE, ntree=5500)
# Aqui pondiramos nuestro dataset de prueba para determinar si personas son propensas al consumo de alcohol o no
Prediction <- predict(randomF, test, type = "response")
str(Prediction)
nrow(Prediction)
colnames(Prediction)
submit <- data.frame(Survived = Prediction, StudentId = test$ID)
write.csv(submit, file = "areYouAnAlcoholic", row.names = FALSE)
write.csv(submit, file = "areYouAnAlcoholic", row.names = TRUE)
